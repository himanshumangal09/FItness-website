{"ast":null,"code":"'use strict';\n\nconst convert = require('convert-units');\n\nconst roundTo = require('round-to');\n\nmodule.exports = (weight, height, opts) => {\n  let kg;\n  let m = height;\n  opts = opts || {};\n  opts.round = opts.round || 1;\n  const numberPattern = '[-+]?[0-9]*\\\\.?[0-9]+';\n  const valueRegEx = new RegExp(\"\".concat(numberPattern));\n\n  if (typeof weight === 'number') {\n    kg = weight;\n  } else if (typeof weight === 'string') {\n    // \\d+\\s?(mass units)\n    const massGroup = convert().possibilities('mass').join('|');\n    const massRegEx = new RegExp(\"((\".concat(numberPattern, \")\\\\s?(\").concat(massGroup, \"))\"), 'g');\n    const unitRegEx = new RegExp(massGroup);\n    const masses = weight.match(massRegEx);\n\n    if (!masses) {\n      throw new Error(\"Expecting \".concat(convert().possibilities('mass'), \" units\"));\n    }\n\n    kg = masses.map(mass => [mass.match(valueRegEx)[0], mass.match(unitRegEx)[0]]).map(mass => parseFloat(convert(mass[0]).from(mass[1]).to('kg'))).reduce((a, b) => a + b);\n  } else {\n    throwTypeError('weight');\n  } // @TODO - Find way to abstract this to abide by DRY\n\n\n  if (typeof height === 'number') {\n    m = convert(height).from('cm').to('m');\n  } else if (typeof height === 'string') {\n    const lengthGroup = convert().possibilities('length').join('|');\n    const lengthsRegEx = new RegExp(\"((\".concat(numberPattern, \")\\\\s?(\").concat(lengthGroup, \"))\"), 'g');\n    const unitRegEx = new RegExp(lengthGroup);\n    const lengths = height.match(lengthsRegEx);\n\n    if (!lengths) {\n      throw new Error(\"Expecting \".concat(convert().possibilities('mass'), \" units\"));\n    }\n\n    m = lengths.map(length => [length.match(valueRegEx)[0], length.match(unitRegEx)[0]]).map(length => parseFloat(convert(length[0]).from(length[1]).to('m'))).reduce((a, b) => a + b);\n  } else {\n    throwTypeError('height');\n  }\n\n  const BMI = kg / Math.pow(m, 2);\n  return !BMI || BMI < 0 ? false : roundTo(BMI, opts.round);\n};\n\nfunction throwTypeError(arg) {\n  throw new TypeError(\"Expecting \".concat(arg, \" to be type string or number.\"));\n}","map":null,"metadata":{},"sourceType":"script"}